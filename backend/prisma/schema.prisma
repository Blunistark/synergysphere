// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  createdProjects  Project[]        @relation("ProjectCreator")
  memberships      TeamMembership[]
  assignedTasks    Task[]           @relation("TaskAssignee")
  messages         Message[]
  notifications    Notification[]
  attachments      Attachment[]     @relation("UserAttachments")

  @@map("users")
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  summary   String?
  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  creator     User             @relation("ProjectCreator", fields: [createdBy], references: [id])
  members     TeamMembership[]
  tasks       Task[]
  messages    Message[]
  attachments Attachment[]

  @@map("projects")
}

model TeamMembership {
  id        Int      @id @default(autoincrement())
  projectId Int      @map("project_id")
  userId    Int      @map("user_id")
  role      String   @default("member")
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("team_memberships")
}

model Task {
  id          Int       @id @default(autoincrement())
  projectId   Int       @map("project_id")
  title       String
  description String?
  assigneeId  Int?      @map("assignee_id")
  status      String    @default("To-Do") // "To-Do", "In Progress", "Done"
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  attachments Attachment[]

  @@map("tasks")
}

model Message {
  id        Int      @id @default(autoincrement())
  projectId Int      @map("project_id")
  userId    Int      @map("user_id")
  threadId  Int?     @map("thread_id")
  body      String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  @@map("messages")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Attachment {
  id          Int      @id @default(autoincrement())
  filename    String
  originalName String  @map("original_name")
  mimetype    String
  size        Int
  path        String
  projectId   Int?     @map("project_id")
  taskId      Int?     @map("task_id")
  messageId   Int?     @map("message_id")
  uploadedBy  Int      @map("uploaded_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  uploader  User     @relation("UserAttachments", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("attachments")
}
